<?php

namespace common\models\tables;

use Yii;
use yii\behaviors\TimestampBehavior;
use yii\db\Expression;
use yii\db\ActiveRecord;


/**
 * This is the model class for table "tasks".
 *
 * @property int $id
 * @property string $name
 * @property string $description
 * @property string $date
 * @property int $responsible_id
 * @property int $initiator_id
 * @property int $project_id
 * @property string $created_at
 * @property string $updated_at
 *
// * @property Chat[] $chats
// * @property User $initiator
// * @property User $responsible
 * @property Users $user
 */
class Tasks extends ActiveRecord
{

    public function behaviors()
    {
        return [
            [
                'class' => TimestampBehavior::className(),
                'value' => new Expression('NOW()'),
            ],
        ];
    }

    /**
     * Поиск по диапазону дат, начальная дата
     * @var string
     */

    public $createdFrom;

    /**
     * Поиск по диапазону дат, конечная дата
     * @var string
     */

    public $createdTo;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'tasks';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['name', 'description'], 'required'],
            [['date'], 'default', 'value' => date('Y-m-d:H:i:s')],
            [['date'], 'compare', 'compareValue' => date('Y-m-d'), 'operator' => '>='],
            [['date', 'created_at', 'updated_at'], 'safe'],
            [['name'], 'string', 'max' => 128],
            [['description'], 'string'],
            [['initiator_id'], 'exist', 'skipOnError' => true, 'targetClass' => Users::className(), 'targetAttribute' => ['initiator_id' => 'id']],
            [['responsible_id'], 'exist', 'skipOnError' => true, 'targetClass' => Users::className(), 'targetAttribute' => ['responsible_id' => 'id']],
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'name' => 'Name',
            'date' => 'Date',
            'description' => 'Description',
            'responsible_id' => 'Responsible ID',
            'initiator_id' => 'Initiator ID',
            'project_id' => 'Project ID',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getInitiator()
    {
        return $this->hasOne(Users::className(), ['id' => 'initiator_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getResponsible()
    {
        return $this->hasOne(Users::className(), ['id' => 'responsible_id']);
    }

    public static function getUsers($id)
    {
        return static::find()
            ->where(['responsible_id' => $id])
            ->all();
    }

    public static function getTaskCurrentMonth($month, $id)
    {
        return static::find()
            ->where(["MONTH(date)" => $month, 'responsible_id' => $id]);
    }

    public function saveImage($filename)
    {

        $this->image = $filename;

        return $this->save(false);
    }

    public function getImage()
    {
        return ($this->image) ? '/uploads' . $this->image : '/no-image.png';
    }

    /**
     *
     */
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);
    }

    public function beforeDelete()
    {
        $this->deleteImage();
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
}
